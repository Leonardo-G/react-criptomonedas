{"version":3,"sources":["components/Error.js","Hooks/useCriptomendas.js","Hooks/useMoneda.js","components/Formulario.js","cryptomonedas.png","components/Cotizacion.js","components/Spinner.js","App.js","reportWebVitals.js","index.js"],"names":["Error","mensaje","className","useCriptomonedas","label","stateInicial","opciones","useState","state","setstate","onChange","e","target","value","map","opcion","CoinInfo","Name","FullName","Id","useMoneda","codigo","nombre","Formulario","setMoneda","setCriptoMoneda","listacripto","guardarListaCripto","error","setError","moneda","SelectMonedas","consultandoApi","criptomonedas","SelectCripto","consultarAPI","a","axios","get","resultado","data","Data","useEffect","onSubmit","preventDefault","Cotizacion","Object","keys","length","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","Spinner","App","criptoMoneda","setResultado","cargando","setCargando","cotizarCriptomoneda","console","log","url","DISPLAY","componente","src","imgCripto","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f8b1b955.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Error = ({mensaje}) => {\r\n    return (\r\n        <p className=\"error\">{mensaje}</p>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nconst useCriptomonedas = (label, stateInicial, opciones) => {\r\n\r\n    //State de nuestro custom hooks\r\n    const [state, setstate] = useState(stateInicial)\r\n\r\n    const SelectCripto = () => (\r\n        <>\r\n            <label>{label}</label>\r\n            <select\r\n                onChange={ e => setstate(e.target.value)} \r\n                value={state}\r\n            >\r\n                <option value=\"\">Seleccione</option>\r\n                {opciones.map(opcion => (\r\n                    <option key={opcion.CoinInfo.Id} value={opcion.CoinInfo.Name}>{opcion.CoinInfo.FullName}</option>\r\n                ))}\r\n            </select>\r\n        </>\r\n    );\r\n\r\n    //Retornar state, interfaz y fn que modifica el state\r\n    return [state, SelectCripto, setstate];\r\n}\r\n\r\nexport default useCriptomonedas","import React, { useState } from 'react';\r\n\r\nconst useMoneda = (label, stateInicial, opciones) => {\r\n\r\n    //State de nuestro custom hooks\r\n    const [state, setstate] = useState(stateInicial)\r\n\r\n    const Seleccionar = () => (\r\n        <>\r\n            <label>{label}</label>\r\n            <select\r\n                onChange={ e => setstate(e.target.value)} \r\n                value={state}\r\n            >\r\n                <option value=\"\">Seleccione</option>\r\n                {opciones.map(opcion => (\r\n                    <option key={opcion.codigo} value={opcion.codigo}>{opcion.nombre}</option>\r\n                ))}\r\n            </select>\r\n        </>\r\n    );\r\n\r\n    //Retornar state, interfaz y fn que modifica el state\r\n    return [state, Seleccionar, setstate];\r\n}\r\n\r\nexport default useMoneda\r\n","import React, { useEffect, useState } from 'react'\r\nimport {Error} from \"./Error\" \r\nimport useCriptomonedas from '../Hooks/useCriptomendas';\r\nimport useMoneda from '../Hooks/useMoneda';\r\nimport axios from \"axios\"\r\n\r\nexport const Formulario = ({setMoneda, setCriptoMoneda}) => {\r\n\r\n    //State del listado de criptomonedas\r\n    const [ listacripto, guardarListaCripto ] = useState([]);\r\n    const [error, setError] = useState(false)\r\n\r\n    const MONEDAS = [\r\n        {codigo: \"USD\", nombre: \"Dolar de Estados Unidos\"},\r\n        {codigo: \"MXN\", nombre: \"Peso Mexicano\"},\r\n        {codigo: \"EUR\", nombre: \"Euro\"},\r\n        {codigo: \"LIB\", nombre: \"Libra Esterlina\"},\r\n    ]\r\n\r\n    //Utilizar useMoneda\r\n    const [ moneda, SelectMonedas ] = useMoneda(\"Elige tu moneda\", \"\", MONEDAS);\r\n    const [consultandoApi] = useState(true)\r\n\r\n    //Utilizar useCriptomoneda\r\n    const [ criptomonedas, SelectCripto ] = useCriptomonedas(\"Elige tu Criptomoneda\", \"\", listacripto);\r\n\r\n    const consultarAPI = async () => {\r\n        const url = \"https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD\"\r\n\r\n        const resultado = await axios.get(url)\r\n        guardarListaCripto(resultado.data.Data);\r\n    }\r\n\r\n    useEffect( () => {\r\n        consultarAPI()\r\n        //Solo se va a ejecutar una vez, ya que la dependencia no va a cambiar.\r\n    }, [consultandoApi])\r\n    \r\n    //Cuando el usuario hace submit\r\n    const cotizarMoneda = e => {\r\n        e.preventDefault()\r\n\r\n        //Validar si ambos campos estan llenos\r\n        if(moneda === \"\" || criptomonedas === \"\"){\r\n            setError(true)\r\n            return;\r\n        }\r\n\r\n        //Pasar los datos al componente principal\r\n        setError(false);\r\n        setMoneda(moneda);\r\n        setCriptoMoneda(criptomonedas)\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={cotizarMoneda}>\r\n            {error ? <Error mensaje=\"Todos los campos obligatorios\"/> : null}\r\n            <SelectMonedas />\r\n            <SelectCripto />\r\n            <button className=\"btn\">Calcular</button>\r\n        </form>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/cryptomonedas.51f1d2ed.png\";","import React from 'react'\r\n\r\nexport const Cotizacion = ({resultado}) => {\r\n\r\n    if(Object.keys(resultado).length === 0) return null;\r\n    \r\n    return (\r\n        <div className=\"resultado\">\r\n            <h2>El precio es: <span>{resultado.PRICE}</span> </h2>\r\n            <p>El precio más alto del día: <span>{resultado.HIGHDAY}</span> </p>\r\n            <p>El precio más bajo del diá: <span>{resultado.LOWDAY}</span> </p>\r\n            <p>Variación ultimas 24 horas: <span>{resultado.CHANGEPCT24HOUR}</span> </p>\r\n            <p>Última actualización: <span>{resultado.LASTUPDATE}</span> </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport \"./Spinner.css\";\r\n\r\nexport const Spinner = () => {\r\n    return (\r\n        <div className=\"spinner\"></div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\nimport { Formulario } from './components/Formulario';\nimport imgCripto from \"./cryptomonedas.png\";\nimport axios from \"axios\"\nimport { Cotizacion } from './components/Cotizacion';\nimport { Spinner } from './components/Spinner';\n\nexport const App = () => {\n\n  const [moneda, setMoneda] = useState(\"\");\n  const [criptoMoneda, setCriptoMoneda] = useState(\"\");\n  const [resultado, setResultado] = useState({})\n  const [cargando, setCargando] = useState(false)\n\n  useEffect( () => {\n    const cotizarCriptomoneda = async () => {\n      //Evitamos la ejecución la primera vez\n      if(moneda === \"\") return;\n      console.log(\"cotizando..\");\n\n      //Consultar api\n      const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${criptoMoneda}&tsyms=${moneda}`\n      \n      //Mostrar el spinner\n      setCargando(true);\n\n      const resultado = await axios.get(url)\n      setResultado(resultado.data.DISPLAY[criptoMoneda][moneda])\n      setCargando(false)\n    }\n    cotizarCriptomoneda()\n  }, [moneda, criptoMoneda])\n\n  //Mostrar spinner o resultado\n  const componente = (cargando) ? <Spinner /> : <Cotizacion resultado={resultado}/>\n\n  return (\n    <div className=\"container\">\n      <div>\n        <img className=\"imgIzq\" src={imgCripto} alt=\"criptomonedas\"/>\n      </div>\n      <div>\n        <h1 className=\"heading\">Cotiza Criptomedas al instante</h1> \n        <Formulario setMoneda={setMoneda} setCriptoMoneda={setCriptoMoneda} />\n        {componente} \n      </div>\n    </div>\n  )\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}